generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id                       Int      @id @default(autoincrement())
  created_date             DateTime @default(now())
  modified_date            DateTime @updatedAt
  street_line_1            String   @db.VarChar(255)
  street_line_2            String?  @db.VarChar(255)
  city                     String   @db.VarChar(255)
  province                 String   @db.VarChar(255)
  postal_code              String   @db.VarChar(255)
  country                  String   @db.VarChar(255)
  default_shipping_address Boolean  @default(false)
  users                    users?   @relation(fields: [users_id], references: [id])
  users_id                 Int?
  orders                   order[]
}

model category {
  id             Int        @id @default(autoincrement())
  category_name  String     @db.VarChar(255)
  category_code  String     @unique @db.VarChar(255)
  description    String?
  parent_id      Int?
  active         Int        @default(1)
  created_date   DateTime?  @default(now())
  modified_date  DateTime?  @updatedAt
  created_by     Int?
  modified_by    Int?
  category       category?  @relation("categoryTocategory", fields: [parent_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_category_parent_id")
  other_category category[] @relation("categoryTocategory")
  product        product[]

  @@index([parent_id], map: "fk_category_parent_id")
}

model favorite {
  id           Int       @id @default(autoincrement())
  product_id   Int
  user_id      Int
  created_date DateTime? @db.Timestamp(0)
  product      product   @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "fk_favorite_product")
  users        users     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_favorite_user")

  @@index([product_id], map: "fk_favorite_product")
  @@index([user_id], map: "fk_favorite_user")
}

model asset {
  id                    Int                     @id @default(autoincrement())
  name                  String
  url                   String
  width                 Int
  height                Int
  format                String
  cloudinary_asset_id   String
  cloudinary_public_id  String
  created_date          DateTime?               @db.Timestamp(0)
  modified_date         DateTime?               @db.Timestamp(0)
  created_by            Int?
  modified_by           Int?
  product_asset         product_asset[]
  product_variant_asset product_variant_asset[]
  product               product[]
  product_variant       product_variant[]
}

model product {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(255)
  description       String?
  slug              String            @unique @db.VarChar(255)
  category_id       Int?
  brand_id          Int?
  active            Int               @default(1)
  created_date      DateTime?         @default(now())
  modified_date     DateTime?         @updatedAt
  created_by        Int?
  modified_by       Int?
  favorite          favorite[]
  category          category?         @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "fk_product_cate")
  product_variants  product_variant[]
  asset_ids         product_asset[]
  featured_asset    asset?            @relation(fields: [featured_asset_id], references: [id])
  featured_asset_id Int?

  @@index([category_id], map: "fk_product_cate")
}

model product_asset {
  id         Int     @id @default(autoincrement())
  product    product @relation(fields: [product_id], references: [id])
  product_id Int
  asset      asset   @relation(fields: [asset_id], references: [id])
  asset_id   Int

  @@unique([asset_id, product_id])
}

model product_variant_asset {
  id                 Int             @id @default(autoincrement())
  product_variant    product_variant @relation(fields: [product_variant_id], references: [id])
  product_variant_id Int
  asset              asset           @relation(fields: [asset_id], references: [id])
  asset_id           Int

  @@unique([asset_id, product_variant_id])
}

model product_variant {
  id                Int                      @id @default(autoincrement())
  stock             Int                      @default(0)
  sku               String                   @unique @db.VarChar(255)
  price             Int                      @default(0)
  created_date      DateTime?                @default(now())
  modified_date     DateTime?                @updatedAt
  created_by        Int?
  modified_by       Int?
  product_options   product_variant_option[]
  product           product?                 @relation(fields: [product_id], references: [id])
  product_id        Int?
  asset_ids         product_variant_asset[]
  featured_asset    asset?                   @relation(fields: [featured_asset_id], references: [id])
  featured_asset_id Int?
  carts             cart[]
}

model product_variant_option {
  id                 Int             @id @default(autoincrement())
  product_variant    product_variant @relation(fields: [product_variant_id], references: [id])
  product_variant_id Int
  product_option     product_option  @relation(fields: [product_option_id], references: [id])
  product_option_id  Int

  @@unique([product_option_id, product_variant_id])
}

model rate {
  id            Int      @id @default(autoincrement())
  product_id    Int
  user_id       Int
  title         String   @db.VarChar(255)
  stars         Float    @default(0)
  cmt_datetime  DateTime @default(now())
  content       String
  created_date  DateTime @default(now())
  modified_date DateTime @updatedAt
  created_by    Int?
  modified_by   Int?

  users users @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_users_cmt")

  @@unique([product_id, user_id, cmt_datetime], map: "unique_comments")
  @@index([user_id], map: "fk_users_cmt")
}

model role {
  id            Int          @id @default(autoincrement())
  role_name     String       @db.VarChar(255)
  role_code     String       @unique @db.VarChar(255)
  description   String?
  created_date  DateTime     @default(now())
  modified_date DateTime     @updatedAt
  created_by    Int?
  modified_by   Int?
  permissions   Json?
  users_role    users_role[]
}

model product_option {
  id               Int                      @id @default(autoincrement())
  name             OptionName
  value            String
  created_date     DateTime                 @default(now())
  modified_date    DateTime                 @updatedAt
  created_by       Int?
  modified_by      Int?
  product_variants product_variant_option[]
}

enum OptionName {
  Size     @map("size")
  Color    @map("color")
  Material @map("material")
  Style    @map("style")
}

model users {
  id                   Int                @id @default(autoincrement())
  hashed_rt            String?
  password             String             @db.VarChar(255)
  first_name           String?            @db.VarChar(255)
  last_name            String?            @db.VarChar(255)
  gender               Int                @default(0)
  date_of_birth        DateTime?
  email                String             @unique @db.VarChar(125)
  phone                String?            @db.VarChar(10)
  active               Int                @default(1)
  created_date         DateTime           @default(now())
  modified_date        DateTime           @updatedAt
  created_by           Int?
  modified_by          Int?
  favorite             favorite[]
  rate                 rate[]
  users_role           users_role[]
  address              address[]
  orders               order[]
  user_info_payment    user_info_payment? @relation(fields: [user_info_payment_id], references: [id])
  user_info_payment_id Int?
  carts                cart[]
}

model users_role {
  id      Int   @id @default(autoincrement())
  user_id Int
  role_id Int
  role    role  @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "fk_role_users")
  users   users @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_users_role")

  @@unique([user_id, role_id], map: "unique_speciality")
  @@index([role_id], map: "fk_role_users")
}

model promotion {
  id            Int      @id @default(autoincrement())
  created_date  DateTime @default(now())
  modified_date DateTime @updatedAt
  starts_at     DateTime
  ends_at       DateTime
  coupon_code   String   @unique @db.VarChar(100)
  name          String   @db.VarChar(255)
  active        Int      @default(1)
  limit         Int      @default(0)
  discount      Int      @default(0)
  orders        order[]
}

model cart {
  id                 Int             @id @default(autoincrement())
  quantity           Int             @default(1)
  users              users           @relation(fields: [users_id], references: [id])
  users_id           Int
  created_date       DateTime        @default(now())
  product_variant    product_variant @relation(fields: [product_variant_id], references: [id])
  product_variant_id Int
}

model order {
  id                   Int                @id @default(autoincrement())
  created_date         DateTime           @default(now())
  modified_date        DateTime           @updatedAt
  payment              Boolean            @default(false)
  status               OrderStatus
  users                users              @relation(fields: [users_id], references: [id])
  users_id             Int
  billing_address      address            @relation(fields: [address_id], references: [id])
  address_id           Int
  promotion            promotion?         @relation(fields: [promotion_id], references: [id])
  promotion_id         Int?
  payment_method       PaymentMethod
  user_info_payment    user_info_payment? @relation(fields: [user_info_payment_id], references: [id])
  user_info_payment_id Int?
  total                Float              @default(0)
}

enum OrderStatus {
  Open      @map("open")
  Confirm   @map("confirm")
  Shipped   @map("shipped")
  Completed @map("completed")
  Refund    @map("refund")
  Cancel    @map("cancel")
}

enum PaymentMethod {
  Standard @map("standard")
  Card     @map("card")
}

model user_info_payment {
  id            Int      @id @default(autoincrement())
  created_date  DateTime @default(now())
  modified_date DateTime @updatedAt
  orders        order[]
  users         users[]
}
